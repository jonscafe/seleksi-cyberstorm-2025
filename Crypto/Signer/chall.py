#!/usr/bin/env python3

import os
from Crypto.Util.number import getPrime as get_prime
from Crypto.Util.number import isPrime as is_prime
import secrets
import hashlib

def inverse(a, p):
    return pow(a, p-2, p)

def hash(m):
    h = hashlib.sha256(m).digest()
    return int.from_bytes(h, 'big')

def generate_parameters():
    while True:
        q = get_prime(256)
        r = secrets.randbits(2048-256)
        p = r*q + 1
        if p.bit_length() != 2048: continue
        if not is_prime(p): continue
        break
    
    h = 1
    while True:
        h += 1
        g = pow(h, (p-1)//q, p)
        if g == 1: continue
        break

    return p, q, g

def sign(params, x, m):
    p, q, g = params

    k = secrets.randbelow(q)
    r = pow(g, k, p) % q
    s = inverse(k, q) * (hash(m) + x*r) % q

    return (r, s)

def verify(params, y, m, sig):
    p, q, g = params
    r, s = sig

    assert 0 < r < p
    assert 0 < s < p

    w = inverse(s, q)
    u1 = hash(m) * w % q
    u2 = r * w % q
    v = pow(g, u1, p) * pow(y, u2, p) % p % q
    assert v == r

# p, q, g = generate_parameters()
p = 17229652649859650085751454650782465144745963494888897725510761452649049444147094812803869872047800724773969074606970584806514954310177911255628032260133542075331962476339643074076737654188259305348288046318604824869358571100450708754159717347325211950965795207822946817503131650577024701759576512852109699738605870455845249138322570765468359467172162175251777450783941438923086146238744997575558064260961378225556828026670274063893731173987235328211246391710295403028610221334783507705443323799042144652091460522867008268254985918348999611083916673855323675755091660347570093580627898427218340428340216908727069380703
q = 64822874720317216246114952359792036544541053173809156714107093194404188189651
g = 13300060528922397507981919415382071361527616674345920209299125195173846863680525108779033201238772925536418439387741941389305405739858906938762356549333424373573115664883949280784774681628716641193492584722942293527773577008644050903557063483984864584214167163656600979575318766948528074487971085078721874643840454016470843769475242518530624469097527312161155864696910639194828928951302032620469324103619724536197392213458705520628336377627984453147087735749144075807265147978878382835267336869063862369762232055728872939381688842691155831113410015083671662487010600334514777988834822238604002458850679522336284891075
print(f'{p = }')
print(f'{q = }')
print(f'{g = }')

x = secrets.randbelow(q)
y = pow(g, x, p)
print(f'{y = }')

m = b'gib flag'

r = int(input('r = '))
s = int(input('s = '))

verify((p, q, g), y, m, (r, s))

flag = os.getenv('FLAG', 'STORM{REDACTED}')
print(flag)

